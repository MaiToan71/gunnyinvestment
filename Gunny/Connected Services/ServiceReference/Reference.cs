//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerData", Namespace="http://schemas.datacontract.org/2004/07/Center.Server")]
    public partial class ServerData : object
    {
        
        private int IdField;
        
        private string IpField;
        
        private int LowestLevelField;
        
        private int MustLevelField;
        
        private string NameField;
        
        private int OnlineField;
        
        private int PortField;
        
        private int StateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ip
        {
            get
            {
                return this.IpField;
            }
            set
            {
                this.IpField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LowestLevel
        {
            get
            {
                return this.LowestLevelField;
            }
            set
            {
                this.LowestLevelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MustLevel
        {
            get
            {
                return this.MustLevelField;
            }
            set
            {
                this.MustLevelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Online
        {
            get
            {
                return this.OnlineField;
            }
            set
            {
                this.OnlineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port
        {
            get
            {
                return this.PortField;
            }
            set
            {
                this.PortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ICenterService")]
    public interface ICenterService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/GetServerList", ReplyAction="http://tempuri.org/ICenterService/GetServerListResponse")]
        System.Threading.Tasks.Task<ServiceReference.ServerData[]> GetServerListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/ChargeMoney", ReplyAction="http://tempuri.org/ICenterService/ChargeMoneyResponse")]
        System.Threading.Tasks.Task<bool> ChargeMoneyAsync(int userID, string chargeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/SystemNotice", ReplyAction="http://tempuri.org/ICenterService/SystemNoticeResponse")]
        System.Threading.Tasks.Task<bool> SystemNoticeAsync(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/KitoffUser", ReplyAction="http://tempuri.org/ICenterService/KitoffUserResponse")]
        System.Threading.Tasks.Task<bool> KitoffUserAsync(int playerID, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/ReLoadServerList", ReplyAction="http://tempuri.org/ICenterService/ReLoadServerListResponse")]
        System.Threading.Tasks.Task<bool> ReLoadServerListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/MailNotice", ReplyAction="http://tempuri.org/ICenterService/MailNoticeResponse")]
        System.Threading.Tasks.Task<bool> MailNoticeAsync(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/ActivePlayer", ReplyAction="http://tempuri.org/ICenterService/ActivePlayerResponse")]
        System.Threading.Tasks.Task<bool> ActivePlayerAsync(bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/CreatePlayer", ReplyAction="http://tempuri.org/ICenterService/CreatePlayerResponse")]
        System.Threading.Tasks.Task<bool> CreatePlayerAsync(int id, string name, string password, bool isFirst);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/ValidateLoginAndGetID", ReplyAction="http://tempuri.org/ICenterService/ValidateLoginAndGetIDResponse")]
        System.Threading.Tasks.Task<ServiceReference.ValidateLoginAndGetIDResponse> ValidateLoginAndGetIDAsync(ServiceReference.ValidateLoginAndGetIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/AASUpdateState", ReplyAction="http://tempuri.org/ICenterService/AASUpdateStateResponse")]
        System.Threading.Tasks.Task<bool> AASUpdateStateAsync(bool state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/AASGetState", ReplyAction="http://tempuri.org/ICenterService/AASGetStateResponse")]
        System.Threading.Tasks.Task<int> AASGetStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/ExperienceRateUpdate", ReplyAction="http://tempuri.org/ICenterService/ExperienceRateUpdateResponse")]
        System.Threading.Tasks.Task<int> ExperienceRateUpdateAsync(int serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/NoticeServerUpdate", ReplyAction="http://tempuri.org/ICenterService/NoticeServerUpdateResponse")]
        System.Threading.Tasks.Task<int> NoticeServerUpdateAsync(int serverId, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/UpdateConfigState", ReplyAction="http://tempuri.org/ICenterService/UpdateConfigStateResponse")]
        System.Threading.Tasks.Task<bool> UpdateConfigStateAsync(int type, bool state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/GetConfigState", ReplyAction="http://tempuri.org/ICenterService/GetConfigStateResponse")]
        System.Threading.Tasks.Task<int> GetConfigStateAsync(int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenterService/Reload", ReplyAction="http://tempuri.org/ICenterService/ReloadResponse")]
        System.Threading.Tasks.Task<bool> ReloadAsync(string type);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateLoginAndGetID", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateLoginAndGetIDRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int userID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public bool isFirst;
        
        public ValidateLoginAndGetIDRequest()
        {
        }
        
        public ValidateLoginAndGetIDRequest(string name, string password, int userID, bool isFirst)
        {
            this.name = name;
            this.password = password;
            this.userID = userID;
            this.isFirst = isFirst;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateLoginAndGetIDResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateLoginAndGetIDResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool ValidateLoginAndGetIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int userID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public bool isFirst;
        
        public ValidateLoginAndGetIDResponse()
        {
        }
        
        public ValidateLoginAndGetIDResponse(bool ValidateLoginAndGetIDResult, int userID, bool isFirst)
        {
            this.ValidateLoginAndGetIDResult = ValidateLoginAndGetIDResult;
            this.userID = userID;
            this.isFirst = isFirst;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface ICenterServiceChannel : ServiceReference.ICenterService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class CenterServiceClient : System.ServiceModel.ClientBase<ServiceReference.ICenterService>, ServiceReference.ICenterService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CenterServiceClient() : 
                base(CenterServiceClient.GetDefaultBinding(), CenterServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_ICenterService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CenterServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CenterServiceClient.GetBindingForEndpoint(endpointConfiguration), CenterServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CenterServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CenterServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CenterServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CenterServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CenterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ServerData[]> GetServerListAsync()
        {
            return base.Channel.GetServerListAsync();
        }
        
        public System.Threading.Tasks.Task<bool> ChargeMoneyAsync(int userID, string chargeID)
        {
            return base.Channel.ChargeMoneyAsync(userID, chargeID);
        }
        
        public System.Threading.Tasks.Task<bool> SystemNoticeAsync(string msg)
        {
            return base.Channel.SystemNoticeAsync(msg);
        }
        
        public System.Threading.Tasks.Task<bool> KitoffUserAsync(int playerID, string msg)
        {
            return base.Channel.KitoffUserAsync(playerID, msg);
        }
        
        public System.Threading.Tasks.Task<bool> ReLoadServerListAsync()
        {
            return base.Channel.ReLoadServerListAsync();
        }
        
        public System.Threading.Tasks.Task<bool> MailNoticeAsync(int playerID)
        {
            return base.Channel.MailNoticeAsync(playerID);
        }
        
        public System.Threading.Tasks.Task<bool> ActivePlayerAsync(bool isActive)
        {
            return base.Channel.ActivePlayerAsync(isActive);
        }
        
        public System.Threading.Tasks.Task<bool> CreatePlayerAsync(int id, string name, string password, bool isFirst)
        {
            return base.Channel.CreatePlayerAsync(id, name, password, isFirst);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ValidateLoginAndGetIDResponse> ValidateLoginAndGetIDAsync(ServiceReference.ValidateLoginAndGetIDRequest request)
        {
            return base.Channel.ValidateLoginAndGetIDAsync(request);
        }
        
        public System.Threading.Tasks.Task<bool> AASUpdateStateAsync(bool state)
        {
            return base.Channel.AASUpdateStateAsync(state);
        }
        
        public System.Threading.Tasks.Task<int> AASGetStateAsync()
        {
            return base.Channel.AASGetStateAsync();
        }
        
        public System.Threading.Tasks.Task<int> ExperienceRateUpdateAsync(int serverId)
        {
            return base.Channel.ExperienceRateUpdateAsync(serverId);
        }
        
        public System.Threading.Tasks.Task<int> NoticeServerUpdateAsync(int serverId, int type)
        {
            return base.Channel.NoticeServerUpdateAsync(serverId, type);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateConfigStateAsync(int type, bool state)
        {
            return base.Channel.UpdateConfigStateAsync(type, state);
        }
        
        public System.Threading.Tasks.Task<int> GetConfigStateAsync(int type)
        {
            return base.Channel.GetConfigStateAsync(type);
        }
        
        public System.Threading.Tasks.Task<bool> ReloadAsync(string type)
        {
            return base.Channel.ReloadAsync(type);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ICenterService))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ICenterService))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://127.0.0.1:2009/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CenterServiceClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_ICenterService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CenterServiceClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_ICenterService);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_ICenterService,
        }
    }
}
